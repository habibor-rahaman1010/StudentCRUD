// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ba60bf99-146b-4a0b-ada1-46cd35654c61",
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "f909331d-20b2-4eea-bbc6-89076a84ffce",
                            CreatedAt = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(6378),
                            Email = "habibor.rahaman1010@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Habibor",
                            LastName = "Rahaman",
                            LockoutEnabled = false,
                            NormalizedEmail = "HABIBOR.RAHAMAN1010@GMAIL.COM",
                            NormalizedUserName = "HABIBOR.RAHAMAN1010@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPF3OeeDuEg7O99c2hg3FquDcqDCvsk1DEln0c7UObMKh1qO8HfZt2HMu5JdrGfiDA==",
                            PhoneNumber = "01768280237",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "",
                            SecurityStamp = "726b7f16-e13b-427f-8bbd-77177143539f",
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(6390),
                            UserName = "habibor.rahaman1010@gmail.com"
                        });
                });

            modelBuilder.Entity("Core.Entities.BlogPostTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogPosts", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CategoryTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ClassTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7632),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7633),
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7634),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7635),
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7636),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7636),
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7637),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7638),
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7640),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7640),
                            Name = "Five"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7641),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7642),
                            Name = "Six"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7643),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7644),
                            Name = "Seven"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7645),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7645),
                            Name = "Eight"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7646),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7647),
                            Name = "Nine"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7648),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7648),
                            Name = "Ten"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7650),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7650),
                            Name = "Colleage First Year"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7651),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7652),
                            Name = "Colleg Second Year"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7653),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7653),
                            Name = "BSc In CSE"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7654),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7655),
                            Name = "BSc In EEE"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7656),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7656),
                            Name = "BSc In CS"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7657),
                            ModificationDate = new DateTime(2024, 9, 3, 16, 9, 7, 108, DateTimeKind.Local).AddTicks(7658),
                            Name = "BSc In Civil"
                        });
                });

            modelBuilder.Entity("Core.Entities.StudentTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DOB")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()")
                        .HasAnnotation("Comment", "Date of Birth");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4c82f298-5b61-49f2-84d0-0227016cd564",
                            ConcurrencyStamp = "c066892c-de60-4663-82d9-2dd781aa5c1d",
                            Name = "SUPERADMIN",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "85e9290e-853e-4268-bacc-be56ec953bea",
                            ConcurrencyStamp = "cbe57f42-fb7b-4625-90a5-9b7edd846c58",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "10cb36c2-b256-4654-b46e-5684058292ce",
                            ConcurrencyStamp = "a780c97d-6fda-4529-889a-637bc3de5f2c",
                            Name = "USER",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ba60bf99-146b-4a0b-ada1-46cd35654c61",
                            RoleId = "4c82f298-5b61-49f2-84d0-0227016cd564"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BlogPostTable", b =>
                {
                    b.HasOne("Core.Entities.CategoryTable", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Entities.StudentTable", b =>
                {
                    b.HasOne("Core.Entities.ClassTable", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.CategoryTable", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("Core.Entities.ClassTable", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
